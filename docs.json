[{"name":"Grid","comment":" This library displays a grid of data.\nIt offers filtering, sorting, multiple selection, click event listener and\ncustomizable rendering of the lines, cells and columns.\n\nA grid is defined using a `Config`\n\nThe list of data can be very long, thanks to the use of [FabienHenon/elm-infinite-list-view](https://package.elm-lang.org/packages/FabienHenon/elm-infinite-list-view/latest/) under the hood.\n\n\n# Configure the grid\n\n@docs Config\n\n\n# Configure a column\n\n@docs ColumnConfig, ColumnProperties, stringColumnConfig, intColumnConfig, floatColumnConfig, boolColumnConfig\n\n\n# Configure the column sorting\n\n@docs Sorting, compareFields, compareBoolField\n\n\n# Configure the rendering\n\n@docs viewBool, viewFloat, viewInt, viewProgressBar, viewString, cumulatedBorderWidth, cellStyles\n\n\n# Boilerplate\n\n@docs Model, Msg, init, update, view\n\n\n# Get data\n\n@docs filteredItems\n\n\n# Get grid config\n\n@docs visibleColumns, isSelectionColumn, isSelectionColumnProperties\n\n","unions":[{"name":"Msg","comment":" The messages the grid view can emit.\n\nThe messages constructed with LineClicked (Item a)\nare emitted when an item is clicked, so you can update the model of your app.\n\nThe messages using the SelectionToggled constructor let you know a line selection status changed,\nso you can update the list of selected items if you use it.\n\nYou probably should not use the other constructors.\n\n    case msg of\n        GridMsg (LineClicked item) ->\n            let\n                ( newGridModel, cmd ) =\n                    Grid.update (LineClicked item) model.gridModel\n            in\n            ( { model\n                | gridModel = newGridModel\n                , clickedItem = Just item\n              }\n            , Cmd.map GridMsg cmd\n            )\n\n        GridMsg (SelectionToggled item status) ->\n            let\n                ( newGridModel, cmd ) =\n                    Grid.update (SelectionToggled item status) model.gridModel\n\n                selectedItems =\n                    List.filter .selected newGridModel.content\n            in\n            ( { model\n                | gridModel = newGridModel\n                , selectedItems = selectedItems\n              }\n            , Cmd.map GridMsg cmd\n            )\n\n","args":["a"],"cases":[["CursorEnteredDropZone",["Grid.ColumnConfig a","( Basics.Float, Basics.Float )"]],["InfListMsg",["InfiniteList.Model"]],["FilterLostFocus",[]],["FilterModified",["Grid.ColumnConfig a","String.String"]],["InitializeFilters",["Dict.Dict String.String String.String"]],["InitializeSorting",["String.String","Grid.Sorting"]],["ShowPreferences",[]],["UserClickedHeader",["Grid.ColumnConfig a"]],["UserClickedFilter",[]],["UserClickedLine",["Grid.Filters.Item a"]],["UserClickedMoveHandle",["Grid.ColumnConfig a","( Basics.Float, Basics.Float )"]],["UserClickedPreferenceCloseButton",[]],["UserClickedResizeHandle",["Grid.ColumnConfig a","( Basics.Float, Basics.Float )"]],["UserEndedMouseInteraction",[]],["UserMovedColumn",["( Basics.Float, Basics.Float )"]],["UserMovedResizeHandle",["( Basics.Float, Basics.Float )"]],["UserToggledAllItemSelection",[]],["UserToggledColumnVisibilty",["Grid.ColumnConfig a"]],["UserToggledSelection",["Grid.Filters.Item a"]]]},{"name":"Sorting","comment":" The sorting options for a column, to be used in the properties of a ColumnConfig.\nBy default should use \"Unsorted\" as the value for the order field.\nIf you give any other value (Ascending or Descending), it must match the order\nof the data provided to initialize the grid model.\n\n        { properties =\n            { id = \"Id\"\n            , order = Unsorted\n            , title = \"Id\"\n            , visible = True\n            , width = 50\n            }\n\n","args":[],"cases":[["Unsorted",[]],["Ascending",[]],["Descending",[]]]}],"aliases":[{"name":"ColumnConfig","comment":" The configuration for a column. The grid content is described\nusing a list of ColumnConfigs.\n\nNB: This is a \"low level API\", useful to define custom column types.\nIn order to define common column types, you may want to use higher level API,\ni.e. stringColumnConfig, intColumnConfig, floatColumnConfig,\nboolColumnConfig\n\n    idColumnConfig =\n        { properties =\n            { id = \"Id\"\n            , order = Unsorted\n            , title = \"Id\"\n            , visible = True\n            , width = 50\n            }\n        , comparator = compareIntField (\\item -> item.id)\n        , filters = IntFilter <| intFilter (\\item -> item.id)\n        , filteringValue = Nothing\n        , toString = String.fromInt (\\item -> item.id)\n        , renderer = viewInt (\\item -> item.id)\n        }\n\n","args":["a"],"type":"{ properties : Grid.ColumnProperties, comparator : Grid.Filters.Item a -> Grid.Filters.Item a -> Basics.Order, filteringValue : Maybe.Maybe String.String, filters : Grid.Filters.Filter a, toString : Grid.Filters.Item a -> String.String, renderer : Grid.ColumnProperties -> Grid.Filters.Item a -> Html.Styled.Html (Grid.Msg a) }"},{"name":"ColumnProperties","comment":" ColumnProperties are a part of the configuration for a column.\n\nNB: This is a \"low level API\", useful to define custom column types.\nIn order to define common column types, you may want to use higher level API,\ni.e. stringColumnConfig, intColumnConfig, floatColumnConfig,\nboolColumnConfig\n\n    properties =\n        { id = \"name\"\n        , order = Unsorted\n        , title = \"Name\"\n        , visible = True\n        , width = 100\n        }\n\n","args":[],"type":"{ id : String.String, order : Grid.Sorting, title : String.String, tooltip : String.String, visible : Basics.Bool, width : Basics.Int }"},{"name":"Config","comment":" The configuration for the grid. You should define the css classes, if you want to use some.\n\n    gridConfig =\n        { canSelectRows = True\n        , columns = columnList\n        , containerHeight = 500\n        , containerWidth = 700\n        , hasFilters = True\n        , lineHeight = 20\n        , rowClass = cssClassname\n        }\n\n    cssClassname : Item -> String\n    cssClassname item =\n        if item.selected then\n            \"selected\"\n\n        else\n            \"\"\n\n","args":["a"],"type":"{ canSelectRows : Basics.Bool, columns : List.List (Grid.ColumnConfig a), containerHeight : Basics.Int, containerWidth : Basics.Int, hasFilters : Basics.Bool, headerHeight : Basics.Int, lineHeight : Basics.Int, rowClass : Grid.Filters.Item a -> String.String }"},{"name":"Model","comment":" The grid model. You'll use it but should not have to access its fields,\nand definitely should not modify them directly\n","args":["a"],"type":"{ clickedItem : Maybe.Maybe (Grid.Filters.Item a), config : Grid.Config a, columnsX : List.List Basics.Int, content : List.List (Grid.Filters.Item a), dragStartX : Basics.Float, filterHasFocus : Basics.Bool, hoveredColumn : Maybe.Maybe (Grid.ColumnConfig a), infList : InfiniteList.Model, isAllSelected : Basics.Bool, movingColumn : Maybe.Maybe (Grid.ColumnConfig a), movingColumnDeltaX : Basics.Float, order : Grid.Sorting, resizingColumn : Maybe.Maybe (Grid.ColumnConfig a), showPreferences : Basics.Bool, sortedBy : Maybe.Maybe (Grid.ColumnConfig a) }"}],"values":[{"name":"boolColumnConfig","comment":" Create a ColumnConfig for a column containing a boolean value\n","type":"{ id : String.String, title : String.String, tooltip : String.String, width : Basics.Int, getter : Grid.Filters.Item a -> Basics.Bool, localize : String.String -> String.String } -> Grid.ColumnConfig a"},{"name":"cellStyles","comment":" Common attributes for cell renderers\n","type":"Grid.ColumnProperties -> List.List (Html.Styled.Attribute (Grid.Msg a))"},{"name":"compareBoolField","comment":" Compares two booleans. Use this function in a ColumnConfig\nto define how the values in a given column should be compared.\nThe unique parameter to be provided is a lambda which\nreturns the field to be displayed in this column.\n\n    comparator =\n        compareBoolField (\\item -> item.even)\n\n","type":"(Grid.Filters.Item a -> Basics.Bool) -> Grid.Filters.Item a -> Grid.Filters.Item a -> Basics.Order"},{"name":"compareFields","comment":" Compares two integers, two floats or two strings.\nUse this function in a ColumnConfig\nto define how the values in a given column should be compared.\nThe unique parameter to be provided is a lambda which\nreturns the field to be displayed in this column.\n\n    comparator =\n        compareFields (\\item -> item.id)\n\n","type":"(Grid.Filters.Item a -> comparable) -> Grid.Filters.Item a -> Grid.Filters.Item a -> Basics.Order"},{"name":"cumulatedBorderWidth","comment":" Left + right cell border width, including padding, in px.\nUseful to take in account the borders when calculating the total grid width\n","type":"Basics.Int"},{"name":"filteredItems","comment":" The list of items satisfying the current filtering values\n","type":"Grid.Model a -> List.List (Grid.Filters.Item a)"},{"name":"floatColumnConfig","comment":" Create a ColumnConfig for a column containing a float value\n","type":"{ id : String.String, title : String.String, tooltip : String.String, width : Basics.Int, getter : Grid.Filters.Item a -> Basics.Float, localize : String.String -> String.String } -> Grid.ColumnConfig a"},{"name":"init","comment":" Initializes the grid model, according to the given grid configuration\nand content.\n\n      init : () -> ( Model, Cmd Msg )\n      init _ =\n         ( { gridModel = Grid.init gridConfig items\n           }\n         , Cmd.none\n         )\n\n","type":"Grid.Config a -> List.List (Grid.Filters.Item a) -> Grid.Model a"},{"name":"intColumnConfig","comment":" Create a ColumnConfig for a column containing an integer value\n","type":"{ id : String.String, title : String.String, tooltip : String.String, width : Basics.Int, getter : Grid.Filters.Item a -> Basics.Int, localize : String.String -> String.String } -> Grid.ColumnConfig a"},{"name":"isSelectionColumn","comment":" Returns true when the given ColumnConfig is the one of the multiple selection column,\nprovided by Grid when row selection is activated\n","type":"Grid.ColumnConfig a -> Basics.Bool"},{"name":"isSelectionColumnProperties","comment":" Returns true when the given Properties are the one of the multiple selection column,\nprovided by Grid when row selection is activated\n","type":"{ a | id : String.String } -> Basics.Bool"},{"name":"stringColumnConfig","comment":" Create a ColumnConfig for a column containing a string value\n","type":"{ id : String.String, title : String.String, tooltip : String.String, width : Basics.Int, getter : Grid.Filters.Item a -> String.String, localize : String.String -> String.String } -> Grid.ColumnConfig a"},{"name":"update","comment":" Updates the grid model\n","type":"Grid.Msg a -> Grid.Model a -> Grid.Model a"},{"name":"view","comment":" Renders the grid\n","type":"Grid.Model a -> Html.Html (Grid.Msg a)"},{"name":"viewBool","comment":" Renders a cell containing a boolean value. Use this function in a ColumnConfig\nto define how the values in a given column should be rendered.\nThe unique parameter to be provided is a lambda which\nreturns the field to be displayed in this column.\n\n    renderer =\n        viewBool (\\item -> item.even)\n\n","type":"(Grid.Filters.Item a -> Basics.Bool) -> Grid.ColumnProperties -> Grid.Filters.Item a -> Html.Styled.Html (Grid.Msg a)"},{"name":"viewFloat","comment":" Renders a cell containing a floating number. Use this function in a ColumnConfig\nto define how the values in a given column should be rendered.\nThe unique parameter to be provided is a lambda which\nreturns the field to be displayed in this column.\n\n    renderer =\n        viewFloat (\\item -> item.value)\n\n","type":"(Grid.Filters.Item a -> Basics.Float) -> Grid.ColumnProperties -> Grid.Filters.Item a -> Html.Styled.Html (Grid.Msg a)"},{"name":"viewInt","comment":" Renders a cell containing an int value. Use this function in a ColumnConfig\nto define how the values in a given column should be rendered.\nThe unique parameter to be provided is a lambda which\nreturns the field to be displayed in this column.\n\n    renderer =\n        viewInt (\\item -> item.id)\n\n","type":"(Grid.Filters.Item a -> Basics.Int) -> Grid.ColumnProperties -> Grid.Filters.Item a -> Html.Styled.Html (Grid.Msg a)"},{"name":"viewProgressBar","comment":" Renders a progress bar in a a cell containing a integer.\nUse this function in a ColumnConfig to define how the values\nin a given column should be rendered.\nThe unique parameter to be provided is a lambda which\nreturns the field to be displayed in this column.\n\n    renderer =\n        viewProgressBar 8 (\\item -> item.value)\n\n","type":"Basics.Int -> (Grid.Filters.Item a -> Basics.Float) -> Grid.ColumnProperties -> Grid.Filters.Item a -> Html.Styled.Html (Grid.Msg a)"},{"name":"viewString","comment":" Renders a cell containing a string. Use this function in a ColumnConfig\nto define how the values in a given column should be rendered.\nThe unique parameter to be provided is a lambda which\nreturns the field to be displayed in this column.\n\n    renderer =\n        viewString (\\item -> item.name)\n\n","type":"(Grid.Filters.Item a -> String.String) -> Grid.ColumnProperties -> Grid.Filters.Item a -> Html.Styled.Html (Grid.Msg a)"},{"name":"visibleColumns","comment":" The list of visible columns according to their current configuration.\nThis list ignores the actual position of the columns; some of them may require\nan horizontal scrolling to be seen\n","type":"Grid.Model a -> List.List (Grid.ColumnConfig a)"}],"binops":[]}]